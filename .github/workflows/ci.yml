name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  build:
    name: "Build and Test"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: gradle
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Build with Gradle
        run: ./gradlew build --no-daemon
      
      - name: Run tests
        run: ./gradlew test jacocoTestReport --no-daemon

      - name: Generate coverage report
        run: ./gradlew jacocoTestCoverageVerification --no-daemon || true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: '**/build/reports/jacoco/test/jacocoTestReport.xml'
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: JUnit Tests
          path: "**/build/test-results/test/TEST-*.xml"
          reporter: java-junit
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-java-21
          path: '**/build/test-results/test/'
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: "**/build/reports/jacoco/"

  lint-and-format:
    name: "Lint and Format Check"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Check code formatting
        run: ./gradlew spotlessCheck --no-daemon || true

      - name: Comment PR with issues
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå Code quality checks failed. Please review the Checkstyle and formatting reports.'
            })

  compatibility-check:
    name: "API Compatibility Check"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Check API compatibility
        run: |
          if [ -f ".baseline-version" ]; then
            BASELINE=$(cat .baseline-version)
            ./gradlew revapi -PbaselineVersion=$BASELINE --no-daemon || true
          else
            echo "No baseline version found, skipping API compatibility check"
          fi

      - name: Generate API diff report
        if: always()
        run: |
          if [ -d "build/reports/revapi" ]; then
            echo "API changes detected - see revapi report"
          fi

  code-quality:
    name: "Code Quality Analysis"
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: gradle
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Build and analyze with SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ -n "$SONAR_TOKEN" ]; then
            ./gradlew build sonar \
              -Dsonar.token=$SONAR_TOKEN \
              -Dsonar.qualitygate.wait=true \
              --info --no-daemon
          else
            echo "SonarQube analysis skipped - SONAR_TOKEN not configured"
          fi
      
      - name: Run SpotBugs
        run: ./gradlew spotbugsMain --no-daemon || true
      
      - name: Upload SpotBugs results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spotbugs-results
          path: '**/build/reports/spotbugs/'

  dependency-check:
    name: "Dependency Check"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: gradle
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Run OWASP Dependency Check
        run: ./gradlew dependencyCheckAnalyze --no-daemon || true
      
      - name: Upload dependency check results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: '**/build/reports/dependency-check-report.html'
      
      - name: Dependency Review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

  security-scan:
    name: "Security Scan"
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
      
      - name: Set up JDK 21 for CodeQL
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
      
      - name: Build for CodeQL
        run: |
          chmod +x gradlew
          ./gradlew build --no-daemon -x test
      
      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3